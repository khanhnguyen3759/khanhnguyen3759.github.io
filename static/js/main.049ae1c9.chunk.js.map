{"version":3,"sources":["screens/counter/Counter.tsx","components/pagination/Pagination.tsx","screens/employee/EmployeeList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Counter","useState","counter","setCounter","className","onClick","Pagination","props","selectedPage","limit","totalRows","onPageChanged","totalPageNumbers","Math","ceil","onPageNumberChanged","pageNum","result","i","push","getPagingNumber","EmployeeList","isLoading","setIsLoading","isOpenAddNew","setIsOpenAddNew","newName","setNewName","newPhone","setNewPhone","employeeList","setEmployeeList","page","filter","setFilter","url","useEffect","a","fetch","data","json","dataJson","console","log","message","getEmployees","reset","onSubmit","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","phone","name","alert","map","e","id","type","value","onChange","target","onNameChanged","onPhoneChanged","pageNumber","App","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.049ae1c9.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './Counter.css'\n\nexport const Counter: React.FC = () => {\n    const [counter, setCounter] = useState(0)\n\n    const onIncrease = () => {\n        setCounter(counter + 1)\n    }\n\n    const onReset = () => {\n        setCounter(0)\n    }\n\n    return (\n        <div className=\"container\">\n            <h2>{counter}</h2>\n            <button onClick={onReset}>Reset</button>\n            <button onClick={onIncrease} className=\"ml-1\">Increase</button>\n        </div>\n    );\n}\n","import React from 'react';\nimport './Pagination.css'\n\ninterface Props {\n    selectedPage: number\n    limit: number\n    totalRows: number\n    onPageChanged: (page: number) => void\n}\n\nexport const Pagination: React.FC<Props> = (props) => {\n    const { selectedPage, limit, totalRows, onPageChanged } = props\n    const totalPageNumbers = Math.ceil(totalRows / limit)\n\n    const onPageNumberChanged = (pageNum: number): void => {\n        if ((pageNum - 1) * limit >= totalRows || pageNum < 1) {\n            return\n        }\n        onPageChanged(pageNum)\n    }\n\n    const getPagingNumber = (): JSX.Element[] => {\n        const result: JSX.Element[] = []\n        for (let i = 1; i <= totalPageNumbers; i++) {\n            result.push((<div key={i} className={`${selectedPage === i && 'active'}`} onClick={() => onPageNumberChanged(i)}>{i}</div>))\n        }\n        return result\n    }\n\n    return (\n        <div className=\"pagination\">\n            <div onClick={() => onPageNumberChanged(selectedPage - 1)}>&laquo;</div>\n            {\n                getPagingNumber()\n            }\n            <div onClick={() => onPageNumberChanged(selectedPage + 1)}>&raquo;</div>\n        </div>\n    );\n}\n","import React, {useEffect, useState} from 'react';\nimport './EmployeeList.css'\nimport { Pagination } from \"../../components\";\n\ninterface Employee {\n    id: string,\n    phone: string,\n    name: string\n}\n\ninterface Filter {\n    page: number,\n    limit: number\n}\n\nexport const EmployeeList: React.FC = () => {\n    const [isLoading, setIsLoading] = useState<boolean>(false)\n    const [isOpenAddNew, setIsOpenAddNew] = useState<boolean>(false)\n    const [newName, setNewName] = useState<string>('')\n    const [newPhone, setNewPhone] = useState<string>('')\n    const [employeeList, setEmployeeList] = useState<Employee[]>([])\n    const [filter, setFilter] = useState<Filter>({\n        page: 1,\n        limit: 5\n    })\n\n    const url = 'https://60ed7dc9a78dc700178adf53.mockapi.io/employees'\n    const totalRows = 35 // should be get from server\n    const {page, limit} = filter\n\n    useEffect(() => {\n        async function getEmployees() {\n            try {\n                setIsLoading(true)\n                const data = await fetch(`${url}?page=${filter.page}&limit=${filter.limit}`)\n                const dataJson: Employee[] = await data.json()\n                setEmployeeList(dataJson)\n            } catch (e) {\n                console.log('Failed to fetch data', e.message)\n            } finally {\n                setIsLoading(false)\n            }\n        }\n\n        getEmployees()\n    }, [filter])\n\n    const reset = (): void => {\n        setIsOpenAddNew(false)\n        setNewName('')\n        setNewPhone('')\n    }\n\n    const handleOnPageNumberChanged = (pageNum: number) => {\n        reset()\n        setFilter({\n            ...filter,\n            page: pageNum\n        })\n    }\n\n    const onNameChanged = (e: any) => {\n        setNewName(e.target.value ?? newName)\n    }\n\n    const onPhoneChanged = (e: any) => {\n        setNewPhone(e.target.value ?? newPhone)\n    }\n\n    const onCancel = () => reset()\n\n    const onSubmit = async () => {\n        try {\n            setIsLoading(true)\n            await fetch(url, {\n                method: 'POST',\n                mode: 'cors',\n                cache: 'no-cache',\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                redirect: 'follow',\n                referrerPolicy: 'no-referrer',\n                body: JSON.stringify({\n                    phone: newPhone,\n                    name: newName\n                })\n            });\n            alert('Create new item successfully!!')\n            reset()\n        } catch (e) {\n            console.log('Failed to post data', e.message)\n        } finally {\n            setIsLoading(false)\n        }\n    }\n\n    return (\n        <div className={`${isLoading ? 'container opacity-50' : 'container'}`}>\n            <table>\n                <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Phone</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    employeeList.map(e => (\n                        <tr key={e.id}>\n                            <td>{e.name}</td>\n                            <td>{e.phone}</td>\n                        </tr>\n                    ))\n                }\n\n                {\n                    isOpenAddNew &&\n                    <tr key='100000'>\n                        <td><input type=\"text\" value={newName} onChange={e => onNameChanged(e)}/></td>\n                        <td><input type=\"text\" value={newPhone} onChange={e => onPhoneChanged(e)}/></td>\n                    </tr>\n                }\n                </tbody>\n            </table>\n            {\n                isOpenAddNew ?\n                    <div>\n                        <button onClick={onCancel}>Cancel</button>\n                        <button onClick={onSubmit} className=\"ml-1\">Submit</button>\n                    </div>\n                    : <button onClick={() => setIsOpenAddNew(true)} className=\"mt-1\">+ New</button>\n            }\n            <Pagination\n                selectedPage={page}\n                limit={limit}\n                totalRows={totalRows}\n                onPageChanged={pageNumber => handleOnPageNumberChanged(pageNumber)} />\n        </div>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport {\n  Counter,\n  EmployeeList\n} from \"./screens\";\n\nfunction App() {\n  return (\n      <Router>\n        <div>\n          <ul>\n            <li>\n              <Link to=\"/counter\">Counter</Link>\n            </li>\n            <li>\n              <Link to=\"/employee\">Employee</Link>\n            </li>\n          </ul>\n\n          <hr />\n\n          <Switch>\n            <Route path=\"/counter\">\n              <Counter />\n            </Route>\n            <Route path=\"/employee\">\n              <EmployeeList />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}